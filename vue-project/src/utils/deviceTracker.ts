import FingerprintJS from '@fingerprintjs/fingerprintjs';

const DEVICE_KEY = 'wel_device_token';
const COOKIE_EXPIRY_DAYS = 730; // 2 years

/**
 * Helper to set a long-lived cookie
 */
const setCookie = (name: string, value: string, days: number) => {
    let expires = "";
    if (days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
    }
    // Set a long-lived cookie. IMPORTANT: The path must be root.
    document.cookie = name + "=" + value + expires + "; path=/; Secure; SameSite=Lax";
};

/**
 * Helper to get a cookie value
 */
const getCookie = (name: string) => {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
};

/**
 * Generates or retrieves a near-unique device token and stores it in a long-lived cookie.
 */
export const getDeviceToken = async (): Promise<string> => {
    // 1. Check if token already exists in cookie
    let token = getCookie(DEVICE_KEY);

    if (token) {
        return token;
    }

    // 2. Generate new token using FingerprintJS
    try {
        const fp = await FingerprintJS.load();
        const result = await fp.get();
        token = result.visitorId; // This is the unique ID generated by FingerprintJS

        // 3. Save the new token as a long-lived cookie
        setCookie(DEVICE_KEY, token, COOKIE_EXPIRY_DAYS);

        return token;
    } catch (e) {
        console.error("Fingerprint generation failed:", e);
        // Fallback to a simple unique ID (less reliable)
        token = `fallback-${Date.now()}`;
        setCookie(DEVICE_KEY, token, 1); // 1-day short expiry for fallback
        return token;
    }
};